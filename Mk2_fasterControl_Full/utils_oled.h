#ifndef UTILS_OLED
#define UTILS_OLED

#ifndef SSD1306_NO_SPLASH
#define SSD1306_NO_SPLASH
#endif

#include <Arduino.h>
#include <U8g2lib.h>

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET -1        // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C  ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32

U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* reset=*/U8X8_PIN_NONE);

#define LOGO_WIDTH 72
#define LOGO_HEIGHT 64

const unsigned char logo_bmp[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
  0x0c, 0x06, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x04, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x04, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x0c, 0x0c,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x06, 0x0c, 0x08, 0x01, 0x00, 0x00, 0x00, 0x18, 0x03, 0x02,
  0x08, 0x18, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x02, 0x08, 0x10, 0x06, 0x00, 0x00, 0x00, 0x06,

  0x01, 0x82, 0x08, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x82, 0x08, 0x20, 0x18, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x43, 0x18, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x00, 0x40, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x20, 0x00, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x00, 0x1c, 0x00, 0x01, 0xe0, 0x02,
  0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d,

  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xf0, 0x1c, 0x01, 0x81, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x23, 0x00, 0x81, 0x20, 0x00, 0x00, 0x00, 0x1c, 0x02,
  0x21, 0x81, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1c, 0x06, 0x20, 0x80, 0x90, 0x20, 0x00, 0x00, 0x00,
  0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x1c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x08,
  0x11, 0xc0, 0x1c, 0x02, 0x78, 0x00, 0x00, 0x00, 0x04, 0x33, 0x40, 0x1c, 0x03, 0xff, 0x80, 0x00,
  0x00, 0x06, 0x22, 0x60, 0x1c, 0x03, 0xc1, 0xe0, 0x00, 0x00, 0x02, 0x66, 0x20, 0x1c, 0x03, 0xc0,
  
  0xf0, 0x00, 0x00, 0x03, 0x44, 0x10, 0x1c, 0x03, 0xc0, 0x70, 0x00, 0x00, 0x01, 0x88, 0x18, 0x1c,
  0x03, 0xc0, 0x70, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x1c, 0x03, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0x01, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0xc0, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x41, 0x21, 0x00, 0x83, 0xc0, 0xe0, 0x00, 0x00, 0x00,
  0x44, 0xa1, 0x01, 0x03, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x64, 0xa1, 0x01, 0x83, 0xc0, 0x70, 0x00,
  0x00, 0x00, 0x40, 0x01, 0x00, 0x03, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setupOLED()
{
  if constexpr (OLED_DISPLAY)
  {  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if (!u8x8.begin())
    {
      Serial.println(F("SSD1306 allocation failed"));
    }

    // Clear the buffer
    u8x8.clearDisplay();

    // display.drawBitmap(
    //   (display.width() - LOGO_WIDTH) / 2,
    //   (display.height() - LOGO_HEIGHT) / 2,
    //   logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    // display.display();
    // delay(1000);
  }
}

void updateOLED(uint16_t value)
{
  if constexpr (OLED_DISPLAY)
  {
    static char buffer[5];  // Buffer to hold the formatted string

    u8x8.noInverse();
    u8x8.setFont(u8x8_font_inb33_3x6_r);
    // u8x8.setCursor(0, 1);
    // u8x8.print(value);
    dtostrf(value * 0.001F, 4, 3, buffer);

    u8x8.drawString(0, 1, buffer);
    u8x8.setFont(u8x8_font_7x14B_1x2_r);
    u8x8.drawString(12, 6, "kWh");
    u8x8.refreshDisplay();  // only required for SSD1606/7
  }
}

#endif /* UTILS_OLED */
